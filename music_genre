{"cells":[{"cell_type":"code","source":["import scipy.io.wavfile as wav\n","import numpy as np\n","from tempfile import TemporaryFile\n","import os\n","import pickle\n","import random \n","import operator\n","import math\n","import numpy as np\n","!pip install python_speech_features\n","from python_speech_features import mfcc"],"metadata":{"id":"NxgwWLPeD73f","executionInfo":{"status":"ok","timestamp":1683834803682,"user_tz":-120,"elapsed":4601,"user":{"displayName":"Hadil BenRhouma","userId":"09083021894162603801"}},"outputId":"498a7da0-460f-4647-8a41-aa1ef75c08b7","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: python_speech_features in /usr/local/lib/python3.10/dist-packages (0.6)\n"]}]},{"cell_type":"code","source":["def distance(x, y, k):\n","    return math.sqrt(sum([(a - b) ** 2 for a, b in zip(x, y)]))\n"],"metadata":{"id":"QutM5cMxECum"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def getNeighbors(trainingSet, instance, k):\n","    distances = []\n","    for x in range (len(trainingSet)):\n","        dist = np.linalg.norm(trainingSet[x][0] - instance[0]) + np.linalg.norm(trainingSet[x][1] - instance[1])\n","        distances.append((trainingSet[x][2], dist))\n","    distances.sort(key=operator.itemgetter(1))\n","    neighbors = []\n","    for x in range(k):\n","        neighbors.append(distances[x][0])\n","    return neighbors"],"metadata":{"id":"a1-AMyWAECxV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def nearestClass(neighbors):\n","    classVote = {}\n","\n","    for x in range(len(neighbors)):\n","        response = neighbors[x]\n","        if response in classVote:\n","            classVote[response]+=1 \n","        else:\n","            classVote[response] =1\n","\n","    sorter = sorted(classVote.items(), key = operator.itemgetter(1), reverse=True)\n","    return sorter[0][0]"],"metadata":{"id":"39P2mGS6EC0v"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def getAccuracy(testSet, predictions):\n","    correct = 0 \n","    for x in range (len(testSet)):\n","        if testSet[x][-1]==predictions[x]:\n","            correct+=1\n","    return 1.0*correct/len(testSet)"],"metadata":{"id":"NkchxDs6EK8g"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import os\n","cwd = os.getcwd()\n","print(cwd)\n","\n","directory = \"/content/drive/MyDrive/Colab Notebooks/ProjetIA/archive/Data/genres_original/\"\n","f= open(\"my.dat\" ,'wb')\n","i=0\n","for folder in os.listdir(directory):\n","    i+=1\n","    if i==11 :\n","        break   \n","    for file in os.listdir(directory+folder):  \n","        try:\n","            (rate,sig) = wav.read(directory+folder+\"/\"+file)\n","        except ValueError:\n","            continue\n","        mfcc_feat = mfcc(sig,rate ,winlen=0.020, appendEnergy = False)\n","        covariance = np.cov(np.transpose(mfcc_feat))\n","        mean_matrix = mfcc_feat.mean(0)\n","        feature = (mean_matrix , covariance , i)\n","        pickle.dump(feature , f)\n","\n","\n","f.close()\n","from google.colab import files\n","\n","# download a file\n","files.download(\"my.dat\")"],"metadata":{"id":"Rv1sYaHhELAA","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1683834963689,"user_tz":-120,"elapsed":143710,"user":{"displayName":"Hadil BenRhouma","userId":"09083021894162603801"}},"outputId":"6af37220-f4f1-4ea0-f47f-e0067d7f0154"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_728e7d3e-b82a-489d-bf7e-b3f23644b41a\", \"my.dat\", 1640358)"]},"metadata":{}}]},{"cell_type":"code","source":["\n","dataset = []\n","def loadDataset(filename , split , trSet , teSet):\n","    with open(\"my.dat\" , 'rb') as f:\n","        while True:\n","            try:\n","                dataset.append(pickle.load(f))\n","            except EOFError:\n","                f.close()\n","                break  \n","    for x in range(len(dataset)):\n","        if random.random() <split :      \n","            trSet.append(dataset[x])\n","        else:\n","            teSet.append(dataset[x])  \n","trainingSet = []\n","testSet = []\n","loadDataset(\"my.dat\" , 0.66, trainingSet, testSet)\n","\n"],"metadata":{"id":"6vjJLH4ZE5hj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["leng = len(testSet)\n","predictions = []\n","for x in range (leng):\n","    predictions.append(nearestClass(getNeighbors(trainingSet ,testSet[x] , 5))) \n","accuracy1 = getAccuracy(testSet , predictions)\n","print(accuracy1)"],"metadata":{"id":"pxEOxgLdE5k6","executionInfo":{"status":"ok","timestamp":1683835036171,"user_tz":-120,"elapsed":4034,"user":{"displayName":"Hadil BenRhouma","userId":"09083021894162603801"}},"outputId":"e63d9081-f8a6-4d29-b315-a40df4a2fa61","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.647887323943662\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"WZASfqVK0U3L","executionInfo":{"status":"ok","timestamp":1683930302577,"user_tz":-120,"elapsed":3970,"user":{"displayName":"Hadil BenRhouma","userId":"09083021894162603801"}},"outputId":"21b2d28c-e409-4d84-f9b8-24cb25895bef","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]}],"metadata":{"colab":{"provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1683831071256}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}